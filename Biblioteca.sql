-- MySQL Script generated by MySQL Workbench
-- Sun May  7 22:09:28 2023
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering


-- -----------------------------------------------------
-- Schema parcial2
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema parcial2
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `parcial2` DEFAULT CHARACTER SET utf8 ;
USE `parcial2` ;

-- -----------------------------------------------------
-- Table `parcial2`.`persona`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `parcial2`.`persona` (
  `idpersona` INT NOT NULL,
  `nombre` VARCHAR(45) NOT NULL,
  `apellido` VARCHAR(45) NOT NULL,
  `domicilio` VARCHAR(45) NOT NULL,
  `cedula` INT NOT NULL,
  PRIMARY KEY (`idpersona`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `parcial2`.`tema`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `parcial2`.`tema` (
  `idtema` INT NOT NULL,
  `tema` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idtema`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `parcial2`.`genero`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `parcial2`.`genero` (
  `idgenero` INT NOT NULL,
  `genero` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idgenero`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `parcial2`.`libro`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `parcial2`.`libro` (
  `idlibro` INT NOT NULL,
  `titulo` VARCHAR(45) NOT NULL,
  `idioma` VARCHAR(45) NOT NULL,
  `num_paginas` INT NOT NULL,
  `a_publicacion` INT NOT NULL,
  `tema_idtema` INT NOT NULL,
  `genero_idgenero` INT NOT NULL,
  PRIMARY KEY (`idlibro`),
  INDEX `fk_libro_tema1_idx` (`tema_idtema` ASC) ,
  INDEX `fk_libro_genero1_idx` (`genero_idgenero` ASC) ,
  CONSTRAINT `fk_libro_tema1`
    FOREIGN KEY (`tema_idtema`)
    REFERENCES `parcial2`.`tema` (`idtema`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_libro_genero1`
    FOREIGN KEY (`genero_idgenero`)
    REFERENCES `parcial2`.`genero` (`idgenero`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `parcial2`.`autor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `parcial2`.`autor` (
  `idautor` INT NOT NULL,
  `nombre` VARCHAR(45) NOT NULL,
  `fec_nacimiento` DATE NOT NULL,
  PRIMARY KEY (`idautor`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `parcial2`.`copia`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `parcial2`.`copia` (
  `idcopia` INT NOT NULL,
  `libro_idlibro` INT NOT NULL,
  PRIMARY KEY (`idcopia`),
  INDEX `fk_copia_libro1_idx` (`libro_idlibro` ASC) ,
  CONSTRAINT `fk_copia_libro1`
    FOREIGN KEY (`libro_idlibro`)
    REFERENCES `parcial2`.`libro` (`idlibro`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `parcial2`.`prestamo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `parcial2`.`prestamo` (
  `idprestamo` INT NOT NULL,
  `fec_prestamo` DATE NOT NULL,
  `fec_devolucion` DATE NOT NULL,
  `fec_entrega` DATE ,
  `persona_idpersona` INT NOT NULL,
  `copia_idcopia` INT NOT NULL,
  PRIMARY KEY (`idprestamo`),
  INDEX `fk_prestamo_persona_idx` (`persona_idpersona` ASC) ,
  INDEX `fk_prestamo_copia1_idx` (`copia_idcopia` ASC) ,
  CONSTRAINT `fk_prestamo_persona`
    FOREIGN KEY (`persona_idpersona`)
    REFERENCES `parcial2`.`persona` (`idpersona`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_prestamo_copia1`
    FOREIGN KEY (`copia_idcopia`)
    REFERENCES `parcial2`.`copia` (`idcopia`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `parcial2`.`edicion`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `parcial2`.`edicion` (
  `idedicion` INT NOT NULL,
  `num_edicion` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idedicion`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `parcial2`.`factura`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `parcial2`.`factura` (
  `idfactura` INT NOT NULL,
  `valor` INT NOT NULL,
  `estado_multa` INT NOT NULL,
  `valor_multa` INT NULL,
  `prestamo_idprestamo` INT NOT NULL,
  PRIMARY KEY (`idfactura`),
  INDEX `fk_factura_prestamo1_idx` (`prestamo_idprestamo` ASC) ,
  CONSTRAINT `fk_factura_prestamo1`
    FOREIGN KEY (`prestamo_idprestamo`)
    REFERENCES `parcial2`.`prestamo` (`idprestamo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `parcial2`.`libro_has_autor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `parcial2`.`libro_has_autor` (
  `libro_idlibro` INT NOT NULL,
  `autor_idautor` INT NOT NULL,
  `idautor_libro` INT NOT NULL,
  PRIMARY KEY (`idautor_libro`),
  INDEX `fk_libro_has_autor_autor1_idx` (`autor_idautor` ASC) ,
  INDEX `fk_libro_has_autor_libro1_idx` (`libro_idlibro` ASC) ,
  CONSTRAINT `fk_libro_has_autor_libro1`
    FOREIGN KEY (`libro_idlibro`)
    REFERENCES `parcial2`.`libro` (`idlibro`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_libro_has_autor_autor1`
    FOREIGN KEY (`autor_idautor`)
    REFERENCES `parcial2`.`autor` (`idautor`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `parcial2`.`edicion_has_libro`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `parcial2`.`edicion_has_libro` (
  `edicion_idedicion` INT NOT NULL,
  `libro_idlibro` INT NOT NULL,
  `idedicion_libro` INT NOT NULL,
  INDEX `fk_edicion_has_libro_libro1_idx` (`libro_idlibro` ASC) ,
  INDEX `fk_edicion_has_libro_edicion1_idx` (`edicion_idedicion` ASC) ,
  PRIMARY KEY (`idedicion_libro`),
  CONSTRAINT `fk_edicion_has_libro_edicion1`
    FOREIGN KEY (`edicion_idedicion`)
    REFERENCES `parcial2`.`edicion` (`idedicion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_edicion_has_libro_libro1`
    FOREIGN KEY (`libro_idlibro`)
    REFERENCES `parcial2`.`libro` (`idlibro`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

insert into persona(idpersona,nombre,apellido,domicilio,cedula) values
(1,'pepe','gonzales','carrera 80',193837),
(2,'patricia','perez','carrera 20',1944),
(3,'carmen','rodriguez','carrera 10',1933434);

INSERT INTO `parcial2`.`tema` (`idtema`, `tema`) VALUES
(1, 'Tema 1'),
(2, 'Tema 2'),
(3, 'Tema 3');

INSERT INTO `parcial2`.`genero` (`idgenero`, `genero`) VALUES
(1, 'Acción'),
(2, 'Aventura'),
(3, 'Comedia');

INSERT INTO `parcial2`.`libro` (`idlibro`, `titulo`, `idioma`, `num_paginas`, `a_publicacion`, `tema_idtema`, `genero_idgenero`) VALUES
(1, 'El nombre del viento', 'Español', 662, 2007, 1, 2),
(2, 'El temor de un hombre sabio', 'Español', 1007, 2011, 1, 2),
(3, 'El camino de los reyes', 'Español', 1007, 2010, 1, 2),
(4, 'Harry Potter y la piedra filosofal', 'Español', 223, 1997, 2, 1),
(5, 'Harry Potter y la cámara secreta', 'Español', 251, 1998, 2, 1),
(6, 'Harry Potter y el prisionero de Azkaban', 'Español', 317, 1999, 2, 1),
(7, 'La naranja mecánica', 'Inglés', 192, 1962, 3, 3),
(8, '1984', 'Inglés', 328, 1949, 3, 3),
(9, 'Cien años de soledad', 'Español', 471, 1967, 3, 3);

INSERT INTO `parcial2`.`autor` (`idautor`, `nombre`, `fec_nacimiento`) VALUES
(1, 'Patrick Rothfuss', '1973-06-06'),
(2, 'J.K. Rowling', '1965-07-31'),
(3, 'Anthony Burgess', '1917-02-25'),
(4, 'George Orwell', '1903-06-25'),
(5, 'Gabriel García Márquez', '1927-03-06');

INSERT INTO `parcial2`.`copia` (`idcopia`, `libro_idlibro`) VALUES
(1, 1),
(2, 1),
(3, 1),
(4, 2),
(5, 2),
(6, 3),
(7, 3),
(8, 3);

INSERT INTO `parcial2`.`prestamo` (`idprestamo`, `fec_prestamo`, `fec_devolucion`, `fec_entrega`, `persona_idpersona`, `copia_idcopia`) VALUES
(1, '2023-05-07', '2023-05-14', NULL, 1, 1),
(2, '2023-05-08', '2023-05-15', NULL, 2, 2),
(3, '2023-05-10', '2023-05-17', NULL, 3, 3),
(4, '2023-05-02', '2023-05-05', '2023-05-05',2,4); 

INSERT INTO `parcial2`.`prestamo` (`idprestamo`, `fec_prestamo`, `fec_devolucion`, `fec_entrega`, `persona_idpersona`, `copia_idcopia`) VALUES 
(5,'2023-05-02', '2023-05-05', '2023-05-05',2,4 );

INSERT INTO `parcial2`.`edicion` (`idedicion`, `num_edicion`) VALUES
(1, 'Primera edición'),
(2, 'Segunda edición'),
(3, 'Tercera edición');

INSERT INTO `parcial2`.`factura` (`idfactura`, `valor`, `estado_multa`, `valor_multa`, `prestamo_idprestamo`) 
VALUES 
(1, 10000, 0, NULL, 1),
(2, 15000, 1, 5000, 2),
(3, 20000, 1, 10000, 3);

INSERT INTO `parcial2`.`libro_has_autor` (`libro_idlibro`, `autor_idautor`, `idautor_libro`) VALUES
  (1, 1, 1),
  (2, 2, 2),
  (3, 3, 3),
  (4, 4, 4),
  (5, 5, 5),
  (7,1,6);

INSERT INTO `parcial2`.`edicion_has_libro` (`edicion_idedicion`, `libro_idlibro`,idedicion_libro) VALUES 
(1, 1, 1),
(1, 2, 2),
(1, 3, 3),
(2, 1, 4);

#Cantidad de libros escritos por un autor
DELIMITER //
CREATE PROCEDURE libros_por_autor (IN autor_id INT, OUT cant_libros INT)
BEGIN
    SELECT COUNT(*) INTO cant_libros
    FROM parcial2.libro_has_autor
    WHERE autor_idautor = autor_id;
END //
DELIMITER ;

CALL libros_por_autor(1, @cant_libros);
SELECT @cant_libros;

#Listado de libros que se han publicado entre el año 2020 y 2023
create view listado_librosano as
select l.titulo
from libro l
WHERE l.a_publicacion BETWEEN 2000 AND 2020;

select *from listado_librosano;

#La cantidad de libros que se encuentran prestados actualmente con los datos de las personas que los tienen prestados.
DELIMITER //
CREATE PROCEDURE libros_prestados ()
BEGIN
   SELECT COUNT(*) as cantidad_libros_prestados, p.fec_prestamo, pe.nombre, pe.apellido
FROM copia c
JOIN prestamo p ON c.libro_idlibro = p.copia_idcopia
JOIN persona pe ON p.persona_idpersona = pe.idpersona
WHERE p.fec_entrega IS NULL
GROUP BY p.fec_prestamo, pe.nombre, pe.apellido;

END //
DELIMITER ;

CALL libros_prestados();
drop procedure libros_prestados;

#Traer el listado de libros por géneros

drop view listado_genero;
create view listado_genero as 
select l.titulo
from libro l
where l.genero_idgenero = 2;

select *from listado_genero;

#Traer listado de libros por tema.

drop view listado_tema;
create view listado_tema as 
select l.titulo
from libro l
where l.tema_idtema = 1;

select *from listado_tema;

# se debe realizar un procedimiento almacenado que le diga al usuario en el momento que lleve 3 préstamos.
drop procedure verificar_prestamos;
DELIMITER //
CREATE PROCEDURE verificar_prestamos (IN id_persona INT)
BEGIN
  DECLARE cantidad_prestamos INT;
  
  SELECT COUNT(*) INTO cantidad_prestamos
  FROM prestamo p
  WHERE id_persona = p.persona_idpersona;
  
  IF cantidad_prestamos >= 3 THEN
    SELECT 'Lo sentimos, ha alcanzado el límite de préstamos' AS mensaje;
  ELSE
    SELECT 'Todavía puede realizar préstamos' AS mensaje;
  END IF;
END//
DELIMITER ;

call verificar_prestamos(2);

#Se debe mostrar lo que ha pagado por multas un usuario.
drop procedure Estado_multa;
DELIMITER //
CREATE PROCEDURE Estado_multa (IN id_persona INT)
BEGIN
SELECT COALESCE(f.valor_multa, 'No hay multa habilitada') AS monto_pagado, pe.nombre
FROM factura f
JOIN prestamo p ON f.prestamo_idprestamo = p.idprestamo
JOIN persona pe ON p.persona_idpersona = pe.idpersona
WHERE pe.idpersona = id_persona;

END//
DELIMITER ;
call Estado_multa(1);

#No se puede permitir que un usuario saque el mismo libro si ya tiene uno de estos en su poder.

drop TRIGGER libro_duplicado;
DELIMITER //
CREATE TRIGGER libro_duplicado
BEFORE INSERT ON prestamo FOR EACH ROW
BEGIN
    DECLARE cantidad_prestamos INT;
    SELECT COUNT(*) INTO cantidad_prestamos
    FROM prestamo p
    JOIN copia c ON p.copia_idcopia = c.idcopia
    JOIN libro l ON c.libro_idlibro = l.idlibro
    WHERE p.persona_idpersona = NEW.persona_idpersona
        AND p.copia_idcopia = NEW.copia_idcopia
        AND p.fec_entrega IS NULL
        AND c.idcopia = NEW.copia_idcopia;
    IF cantidad_prestamos > 0 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'El usuario ya tiene un préstamo activo para este libro.';
    END IF;
END //
DELIMITER ;


INSERT INTO `parcial2`.`prestamo` (`idprestamo`, `fec_prestamo`, `fec_devolucion`, `fec_entrega`, `persona_idpersona`, `copia_idcopia`) VALUES 
(13,'2023-05-02', '2023-05-05', null,2,4 );

select *from  prestamo;


